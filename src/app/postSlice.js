import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchPosts, fetchPostsById } from "../api/posts";

const initialState = {
  loading: false,
  errorMessage: "",
  posts: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPosts = createAsyncThunk(
  "post/getPosts",
  async (id, thunkAPI) => {
    console.log(id);
    try {
      if (id === null) {
        const response = await fetchPosts();
        return response.data;
      } else {
        const response = await fetchPostsById(id);
        return response.data;
      }
    } catch (error) {
      return thunkAPI.rejectiWithValue(error);
    }
  }
);

export const postSlice = createSlice({
  name: "post",
  initialState,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getPosts.pending]: (state) => {
      state.generalError = false;
      state.errorMessage = "";
      state.loading = true;
    },
    [getPosts.rejected]: (state, action) => {
      state.loading = false;
      state.errorMessage = action.payload;
    },
    [getPosts.fulfilled]: (state, { payload }) => {
      state.loading = false;
      state.posts = payload;
    },
  },
});

export default postSlice.reducer;
